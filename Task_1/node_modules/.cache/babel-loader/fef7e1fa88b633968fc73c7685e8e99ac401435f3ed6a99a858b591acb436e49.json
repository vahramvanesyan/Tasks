{"ast":null,"code":"// import React, { useEffect, useState } from \"react\"\n// export const ProductContext = React.createContext()\n// export const ProductProvaider = (props) => {\n//     const [products, setProducts] = useState([])\n//     const [cart, setCart] = useState([])\n//     const [isAddedToCart, setIsAddedToCart] = useState(false)\n//     const [image, setImage] = useState(null)\n//     const [total, setTotal] = useState(0)\n//     const [searchQuery, setSearchQuery] = useState(\"\")\n\n//     const filteredProducts = products.filter(product =>\n//         product.category && product.category.toLowerCase().includes(searchQuery.toLowerCase())\n//     )\n\n//     const [isMenuOpen, setIsMenuOpen] = useState(false)\n\n//     const toggleMenu = () => {\n//         setIsMenuOpen(!isMenuOpen)\n//     }\n\n//     useEffect(() => {\n//         fetch('https://fakestoreapi.com/products')\n//             .then(response => response.json())\n//             .then(data => setProducts(data))\n//             .catch(error => console.error(\"Error fetching products:\", error))\n//     }, [])\n\n//     const handleImageChange = e => {\n//         const file = e.target.files[0]\n//         setImage(file)\n//     }\n\n//     useEffect(() => {\n//         if (cart.length) {\n//             setTotal(cart.reduce((a, b) => a + b.count * b.price, 0))\n//         } else {\n//             setTotal(0)\n//         }\n//     }, [cart])\n\n//     const moveToCart = prod => {\n//         let found = cart.find(x => x.id === prod.id);\n//         if (found) {\n//             found.count++;\n//             setCart([...cart]);\n//         } else {\n//             setCart([...cart, { ...prod, count: 1, image: prod.image }])\n//         }\n//         setIsAddedToCart(true);\n//         setTimeout(() => {\n//             setIsAddedToCart(false);\n//         }, 2000);\n//     }\n\n//     const countUp = prod => {\n//         setCart([...cart], { ...prod.count++ })\n//     }\n\n//     const countDown = prod => {\n//         if (prod.count > 1) {\n//             prod.count--\n//             setCart([...cart])\n//         }\n//     }\n\n//     const Delete = prod => {\n//         setCart(cart.filter(a => a !== prod))\n//     }\n\n//     return <ProductContext.Provider value={{isMenuOpen, toggleMenu, searchQuery, setSearchQuery, filteredProducts, isAddedToCart, setIsAddedToCart, products, setProducts, cart, setCart, moveToCart, total, countUp, countDown, Delete, image, setImage, handleImageChange }}>\n//         {props.children}\n//     </ProductContext.Provider>\n// }","map":{"version":3,"names":[],"sources":["C:/Users/Vahram/OneDrive/Рабочий стол/homevork/src/Context.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\"\r\n// export const ProductContext = React.createContext()\r\n// export const ProductProvaider = (props) => {\r\n//     const [products, setProducts] = useState([])\r\n//     const [cart, setCart] = useState([])\r\n//     const [isAddedToCart, setIsAddedToCart] = useState(false)\r\n//     const [image, setImage] = useState(null)\r\n//     const [total, setTotal] = useState(0)\r\n//     const [searchQuery, setSearchQuery] = useState(\"\")\r\n\r\n//     const filteredProducts = products.filter(product =>\r\n//         product.category && product.category.toLowerCase().includes(searchQuery.toLowerCase())\r\n//     )\r\n\r\n//     const [isMenuOpen, setIsMenuOpen] = useState(false)\r\n\r\n//     const toggleMenu = () => {\r\n//         setIsMenuOpen(!isMenuOpen)\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         fetch('https://fakestoreapi.com/products')\r\n//             .then(response => response.json())\r\n//             .then(data => setProducts(data))\r\n//             .catch(error => console.error(\"Error fetching products:\", error))\r\n//     }, [])\r\n\r\n//     const handleImageChange = e => {\r\n//         const file = e.target.files[0]\r\n//         setImage(file)\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         if (cart.length) {\r\n//             setTotal(cart.reduce((a, b) => a + b.count * b.price, 0))\r\n//         } else {\r\n//             setTotal(0)\r\n//         }\r\n//     }, [cart])\r\n\r\n//     const moveToCart = prod => {\r\n//         let found = cart.find(x => x.id === prod.id);\r\n//         if (found) {\r\n//             found.count++;\r\n//             setCart([...cart]);\r\n//         } else {\r\n//             setCart([...cart, { ...prod, count: 1, image: prod.image }])\r\n//         }\r\n//         setIsAddedToCart(true);\r\n//         setTimeout(() => {\r\n//             setIsAddedToCart(false);\r\n//         }, 2000);\r\n//     }\r\n\r\n//     const countUp = prod => {\r\n//         setCart([...cart], { ...prod.count++ })\r\n//     }\r\n\r\n//     const countDown = prod => {\r\n//         if (prod.count > 1) {\r\n//             prod.count--\r\n//             setCart([...cart])\r\n//         }\r\n//     }\r\n\r\n\r\n//     const Delete = prod => {\r\n//         setCart(cart.filter(a => a !== prod))\r\n//     }\r\n\r\n//     return <ProductContext.Provider value={{isMenuOpen, toggleMenu, searchQuery, setSearchQuery, filteredProducts, isAddedToCart, setIsAddedToCart, products, setProducts, cart, setCart, moveToCart, total, countUp, countDown, Delete, image, setImage, handleImageChange }}>\r\n//         {props.children}\r\n//     </ProductContext.Provider>\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}